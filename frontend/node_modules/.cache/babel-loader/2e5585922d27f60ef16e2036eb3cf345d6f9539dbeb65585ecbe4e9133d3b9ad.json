{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gondy\\\\OneDrive\\\\Desktop\\\\taskflow-frontend\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport apiService from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n  const initializeAuth = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Check if apiService methods exist\n      if (!apiService || typeof apiService.getToken !== \"function\") {\n        throw new Error(\"API service not properly configured\");\n      }\n      const token = apiService.getToken();\n      if (token) {\n        await getCurrentUser();\n      } else {\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(\"Auth initialization error:\", error);\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n  const getCurrentUser = async () => {\n    try {\n      const response = await apiService.getCurrentUser();\n      if (response.success) {\n        setUser(response.user);\n        setError(null);\n      } else {\n        throw new Error(response.message || \"Failed to get user\");\n      }\n    } catch (error) {\n      console.error(\"Failed to get current user:\", error);\n\n      // Handle authentication errors\n      if (error.message.includes(\"Authentication failed\") || error.message.includes(\"Unauthorized\") || error.message.includes(\"Invalid token\") || error.message.includes(\"Token expired\")) {\n        logout();\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiService.login(credentials);\n      if (response.success && response.token) {\n        apiService.setToken(response.token);\n\n        // If user data is returned with login, use it\n        if (response.user) {\n          setUser(response.user);\n          setLoading(false);\n          return {\n            success: true\n          };\n        } else {\n          // Otherwise fetch user data\n          const userResponse = await apiService.getCurrentUser();\n          if (userResponse.success) {\n            setUser(userResponse.user);\n            setLoading(false);\n            return {\n              success: true\n            };\n          } else {\n            logout();\n            return {\n              success: false,\n              message: userResponse.message || \"Failed to fetch user data after login\"\n            };\n          }\n        }\n      } else {\n        setLoading(false);\n        return {\n          success: false,\n          message: response.message || \"Login failed\"\n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return {\n        success: false,\n        message: error.message || \"Login failed\"\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiService.register(userData);\n      if (response.success && response.token) {\n        apiService.setToken(response.token);\n\n        // If user data is returned with registration, use it\n        if (response.user) {\n          setUser(response.user);\n          setLoading(false);\n          return {\n            success: true\n          };\n        } else {\n          // Otherwise fetch user data\n          const userResponse = await apiService.getCurrentUser();\n          if (userResponse.success) {\n            setUser(userResponse.user);\n            setLoading(false);\n            return {\n              success: true\n            };\n          } else {\n            logout();\n            return {\n              success: false,\n              message: userResponse.message || \"Failed to fetch user data after registration\"\n            };\n          }\n        }\n      } else {\n        setLoading(false);\n        return {\n          success: false,\n          message: response.message || \"Registration failed\"\n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return {\n        success: false,\n        message: error.message || \"Registration failed\"\n      };\n    }\n  };\n  const logout = () => {\n    apiService.removeToken();\n    setUser(null);\n    setError(null);\n    setLoading(false);\n\n    // Redirect to login page\n    if (typeof window !== \"undefined\") {\n      window.location.href = \"/login\";\n    }\n  };\n  const refreshUser = async () => {\n    await getCurrentUser();\n  };\n\n  // Role checking methods\n  const isAdmin = () => (user === null || user === void 0 ? void 0 : user.role) === \"admin\";\n  const isSubAdmin = () => (user === null || user === void 0 ? void 0 : user.role) === \"subadmin\";\n  const isUser = () => (user === null || user === void 0 ? void 0 : user.role) === \"user\";\n  const hasRole = roles => {\n    if (!(user !== null && user !== void 0 && user.role)) return false;\n    return Array.isArray(roles) ? roles.includes(user.role) : roles === user.role;\n  };\n\n  // Auth status checks\n  const isAuthenticated = () => !!user && !!apiService.getToken();\n  const value = {\n    // State\n    user,\n    loading,\n    error,\n    // Actions\n    login,\n    register,\n    logout,\n    refreshUser,\n    // Role checks\n    isAdmin,\n    isSubAdmin,\n    isUser,\n    hasRole,\n    // Status checks\n    isAuthenticated,\n    // Clear error\n    clearError: () => setError(null)\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","useAuth","context","Error","AuthProvider","children","user","setUser","loading","setLoading","error","setError","initializeAuth","getToken","token","getCurrentUser","console","message","response","success","includes","logout","login","credentials","setToken","userResponse","register","userData","removeToken","window","location","href","refreshUser","isAdmin","role","isSubAdmin","isUser","hasRole","roles","Array","isArray","isAuthenticated","value","clearError","Provider","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gondy/OneDrive/Desktop/taskflow-frontend/frontend/src/context/AuthContext.js"],"sourcesContent":["\"use client\";\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport apiService from \"../services/api\";\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n\n  const initializeAuth = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Check if apiService methods exist\n      if (!apiService || typeof apiService.getToken !== \"function\") {\n        throw new Error(\"API service not properly configured\");\n      }\n\n      const token = apiService.getToken();\n\n      if (token) {\n        await getCurrentUser();\n      } else {\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(\"Auth initialization error:\", error);\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n\n  const getCurrentUser = async () => {\n    try {\n      const response = await apiService.getCurrentUser();\n\n      if (response.success) {\n        setUser(response.user);\n        setError(null);\n      } else {\n        throw new Error(response.message || \"Failed to get user\");\n      }\n    } catch (error) {\n      console.error(\"Failed to get current user:\", error);\n\n      // Handle authentication errors\n      if (\n        error.message.includes(\"Authentication failed\") ||\n        error.message.includes(\"Unauthorized\") ||\n        error.message.includes(\"Invalid token\") ||\n        error.message.includes(\"Token expired\")\n      ) {\n        logout();\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiService.login(credentials);\n\n      if (response.success && response.token) {\n        apiService.setToken(response.token);\n\n        // If user data is returned with login, use it\n        if (response.user) {\n          setUser(response.user);\n          setLoading(false);\n          return { success: true };\n        } else {\n          // Otherwise fetch user data\n          const userResponse = await apiService.getCurrentUser();\n          if (userResponse.success) {\n            setUser(userResponse.user);\n            setLoading(false);\n            return { success: true };\n          } else {\n            logout();\n            return {\n              success: false,\n              message:\n                userResponse.message || \"Failed to fetch user data after login\",\n            };\n          }\n        }\n      } else {\n        setLoading(false);\n        return {\n          success: false,\n          message: response.message || \"Login failed\",\n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return {\n        success: false,\n        message: error.message || \"Login failed\",\n      };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiService.register(userData);\n\n      if (response.success && response.token) {\n        apiService.setToken(response.token);\n\n        // If user data is returned with registration, use it\n        if (response.user) {\n          setUser(response.user);\n          setLoading(false);\n          return { success: true };\n        } else {\n          // Otherwise fetch user data\n          const userResponse = await apiService.getCurrentUser();\n          if (userResponse.success) {\n            setUser(userResponse.user);\n            setLoading(false);\n            return { success: true };\n          } else {\n            logout();\n            return {\n              success: false,\n              message:\n                userResponse.message ||\n                \"Failed to fetch user data after registration\",\n            };\n          }\n        }\n      } else {\n        setLoading(false);\n        return {\n          success: false,\n          message: response.message || \"Registration failed\",\n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return {\n        success: false,\n        message: error.message || \"Registration failed\",\n      };\n    }\n  };\n\n  const logout = () => {\n    apiService.removeToken();\n    setUser(null);\n    setError(null);\n    setLoading(false);\n\n    // Redirect to login page\n    if (typeof window !== \"undefined\") {\n      window.location.href = \"/login\";\n    }\n  };\n\n  const refreshUser = async () => {\n    await getCurrentUser();\n  };\n\n  // Role checking methods\n  const isAdmin = () => user?.role === \"admin\";\n  const isSubAdmin = () => user?.role === \"subadmin\";\n  const isUser = () => user?.role === \"user\";\n  const hasRole = (roles) => {\n    if (!user?.role) return false;\n    return Array.isArray(roles)\n      ? roles.includes(user.role)\n      : roles === user.role;\n  };\n\n  // Auth status checks\n  const isAuthenticated = () => !!user && !!apiService.getToken();\n\n  const value = {\n    // State\n    user,\n    loading,\n    error,\n\n    // Actions\n    login,\n    register,\n    logout,\n    refreshUser,\n\n    // Role checks\n    isAdmin,\n    isSubAdmin,\n    isUser,\n    hasRole,\n\n    // Status checks\n    isAuthenticated,\n\n    // Clear error\n    clearError: () => setError(null),\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}