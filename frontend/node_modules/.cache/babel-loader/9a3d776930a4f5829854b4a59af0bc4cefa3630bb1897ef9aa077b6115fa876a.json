{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gondy\\\\Downloads\\\\taskflow-frontend\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// ==========================================\n// FILE: services/api.js\n// ==========================================\n\nclass ApiService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n    this.tokenKey = 'auth_token';\n  }\n\n  // Token management methods\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  removeToken() {\n    localStorage.removeItem(this.tokenKey);\n  }\n\n  // Helper method to get headers with auth token\n  getAuthHeaders() {\n    const token = this.getToken();\n    return {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      })\n    };\n  }\n\n  // Generic API request method\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: this.getAuthHeaders(),\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('API Request Error:', error);\n      throw error;\n    }\n  }\n\n  // Authentication methods\n  async login(credentials) {\n    try {\n      const response = await this.request('/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(credentials)\n      });\n      return {\n        success: true,\n        token: response.token,\n        user: response.user,\n        message: response.message || 'Login successful'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Login failed'\n      };\n    }\n  }\n  async register(userData) {\n    try {\n      const response = await this.request('/auth/register', {\n        method: 'POST',\n        body: JSON.stringify(userData)\n      });\n      return {\n        success: true,\n        token: response.token,\n        user: response.user,\n        message: response.message || 'Registration successful'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Registration failed'\n      };\n    }\n  }\n  async getCurrentUser() {\n    try {\n      const response = await this.request('/auth/me');\n      return {\n        success: true,\n        user: response.user || response,\n        message: response.message || 'User fetched successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to fetch user'\n      };\n    }\n  }\n  async refreshToken() {\n    try {\n      const response = await this.request('/auth/refresh', {\n        method: 'POST'\n      });\n      return {\n        success: true,\n        token: response.token,\n        message: response.message || 'Token refreshed successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to refresh token'\n      };\n    }\n  }\n\n  // User management methods\n  async updateProfile(userData) {\n    try {\n      const response = await this.request('/user/profile', {\n        method: 'PUT',\n        body: JSON.stringify(userData)\n      });\n      return {\n        success: true,\n        user: response.user,\n        message: response.message || 'Profile updated successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to update profile'\n      };\n    }\n  }\n  async changePassword(passwordData) {\n    try {\n      const response = await this.request('/user/change-password', {\n        method: 'POST',\n        body: JSON.stringify(passwordData)\n      });\n      return {\n        success: true,\n        message: response.message || 'Password changed successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to change password'\n      };\n    }\n  }\n}\n\n// Export as default instance\nexport default new ApiService();\n\n// ==========================================\n// FILE: contexts/AuthContext.js\n// ==========================================\n\n\"use client\";\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport apiService from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n  const initializeAuth = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Check if apiService methods exist\n      if (!apiService || typeof apiService.getToken !== 'function') {\n        throw new Error('API service not properly configured');\n      }\n      const token = apiService.getToken();\n      if (token) {\n        await getCurrentUser();\n      } else {\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n  const getCurrentUser = async () => {\n    try {\n      const response = await apiService.getCurrentUser();\n      if (response.success) {\n        setUser(response.user);\n        setError(null);\n      } else {\n        throw new Error(response.message || 'Failed to get user');\n      }\n    } catch (error) {\n      console.error(\"Failed to get current user:\", error);\n\n      // Handle authentication errors\n      if (error.message.includes(\"Authentication failed\") || error.message.includes(\"Unauthorized\") || error.message.includes(\"Invalid token\") || error.message.includes(\"Token expired\")) {\n        logout();\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiService.login(credentials);\n      if (response.success && response.token) {\n        apiService.setToken(response.token);\n\n        // If user data is returned with login, use it\n        if (response.user) {\n          setUser(response.user);\n          setLoading(false);\n          return {\n            success: true\n          };\n        } else {\n          // Otherwise fetch user data\n          const userResponse = await apiService.getCurrentUser();\n          if (userResponse.success) {\n            setUser(userResponse.user);\n            setLoading(false);\n            return {\n              success: true\n            };\n          } else {\n            logout();\n            return {\n              success: false,\n              message: userResponse.message || \"Failed to fetch user data after login\"\n            };\n          }\n        }\n      } else {\n        setLoading(false);\n        return {\n          success: false,\n          message: response.message || \"Login failed\"\n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return {\n        success: false,\n        message: error.message || \"Login failed\"\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiService.register(userData);\n      if (response.success && response.token) {\n        apiService.setToken(response.token);\n\n        // If user data is returned with registration, use it\n        if (response.user) {\n          setUser(response.user);\n          setLoading(false);\n          return {\n            success: true\n          };\n        } else {\n          // Otherwise fetch user data\n          const userResponse = await apiService.getCurrentUser();\n          if (userResponse.success) {\n            setUser(userResponse.user);\n            setLoading(false);\n            return {\n              success: true\n            };\n          } else {\n            logout();\n            return {\n              success: false,\n              message: userResponse.message || \"Failed to fetch user data after registration\"\n            };\n          }\n        }\n      } else {\n        setLoading(false);\n        return {\n          success: false,\n          message: response.message || \"Registration failed\"\n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return {\n        success: false,\n        message: error.message || \"Registration failed\"\n      };\n    }\n  };\n  const logout = () => {\n    apiService.removeToken();\n    setUser(null);\n    setError(null);\n    setLoading(false);\n\n    // Redirect to login page\n    if (typeof window !== 'undefined') {\n      window.location.href = \"/login\";\n    }\n  };\n  const refreshUser = async () => {\n    await getCurrentUser();\n  };\n  const updateProfile = async userData => {\n    try {\n      const response = await apiService.updateProfile(userData);\n      if (response.success) {\n        setUser(response.user);\n        return {\n          success: true,\n          message: response.message\n        };\n      } else {\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n\n  // Role checking methods\n  const isAdmin = () => (user === null || user === void 0 ? void 0 : user.role) === \"admin\";\n  const isSubAdmin = () => (user === null || user === void 0 ? void 0 : user.role) === \"subadmin\";\n  const isUser = () => (user === null || user === void 0 ? void 0 : user.role) === \"user\";\n  const hasRole = roles => {\n    if (!(user !== null && user !== void 0 && user.role)) return false;\n    return Array.isArray(roles) ? roles.includes(user.role) : roles === user.role;\n  };\n\n  // Auth status checks\n  const isAuthenticated = () => !!user && !!apiService.getToken();\n  const isLoading = () => loading;\n  const hasError = () => !!error;\n  const value = {\n    // State\n    user,\n    loading,\n    error,\n    // Actions\n    login,\n    register,\n    logout,\n    refreshUser,\n    updateProfile,\n    // Role checks\n    isAdmin,\n    isSubAdmin,\n    isUser,\n    hasRole,\n    // Status checks\n    isAuthenticated,\n    isLoading,\n    hasError,\n    // Clear error\n    clearError: () => setError(null)\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 426,\n    columnNumber: 10\n  }, this);\n};\n\n// ==========================================\n// FILE: components/ProtectedRoute.js (BONUS)\n// ==========================================\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["ApiService","constructor","baseURL","process","env","REACT_APP_API_URL","tokenKey","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","getAuthHeaders","request","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","message","status","error","console","login","credentials","method","body","JSON","stringify","success","user","register","userData","getCurrentUser","refreshToken","updateProfile","changePassword","passwordData","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","AuthProvider","children","_s2","setUser","loading","setLoading","setError","initializeAuth","includes","logout","userResponse","window","location","href","refreshUser","isAdmin","role","isSubAdmin","isUser","hasRole","roles","Array","isArray","isAuthenticated","isLoading","hasError","value","clearError","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gondy/Downloads/taskflow-frontend/frontend/src/context/AuthContext.js"],"sourcesContent":["// ==========================================\n// FILE: services/api.js\n// ==========================================\n\nclass ApiService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n    this.tokenKey = 'auth_token';\n  }\n\n  // Token management methods\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  setToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  removeToken() {\n    localStorage.removeItem(this.tokenKey);\n  }\n\n  // Helper method to get headers with auth token\n  getAuthHeaders() {\n    const token = this.getToken();\n    return {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` })\n    };\n  }\n\n  // Generic API request method\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: this.getAuthHeaders(),\n      ...options\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API Request Error:', error);\n      throw error;\n    }\n  }\n\n  // Authentication methods\n  async login(credentials) {\n    try {\n      const response = await this.request('/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(credentials)\n      });\n      \n      return {\n        success: true,\n        token: response.token,\n        user: response.user,\n        message: response.message || 'Login successful'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Login failed'\n      };\n    }\n  }\n\n  async register(userData) {\n    try {\n      const response = await this.request('/auth/register', {\n        method: 'POST',\n        body: JSON.stringify(userData)\n      });\n      \n      return {\n        success: true,\n        token: response.token,\n        user: response.user,\n        message: response.message || 'Registration successful'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Registration failed'\n      };\n    }\n  }\n\n  async getCurrentUser() {\n    try {\n      const response = await this.request('/auth/me');\n      \n      return {\n        success: true,\n        user: response.user || response,\n        message: response.message || 'User fetched successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to fetch user'\n      };\n    }\n  }\n\n  async refreshToken() {\n    try {\n      const response = await this.request('/auth/refresh', {\n        method: 'POST'\n      });\n      \n      return {\n        success: true,\n        token: response.token,\n        message: response.message || 'Token refreshed successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to refresh token'\n      };\n    }\n  }\n\n  // User management methods\n  async updateProfile(userData) {\n    try {\n      const response = await this.request('/user/profile', {\n        method: 'PUT',\n        body: JSON.stringify(userData)\n      });\n      \n      return {\n        success: true,\n        user: response.user,\n        message: response.message || 'Profile updated successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to update profile'\n      };\n    }\n  }\n\n  async changePassword(passwordData) {\n    try {\n      const response = await this.request('/user/change-password', {\n        method: 'POST',\n        body: JSON.stringify(passwordData)\n      });\n      \n      return {\n        success: true,\n        message: response.message || 'Password changed successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Failed to change password'\n      };\n    }\n  }\n}\n\n// Export as default instance\nexport default new ApiService();\n\n// ==========================================\n// FILE: contexts/AuthContext.js\n// ==========================================\n\n\"use client\";\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport apiService from \"../services/api\";\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n\n  const initializeAuth = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Check if apiService methods exist\n      if (!apiService || typeof apiService.getToken !== 'function') {\n        throw new Error('API service not properly configured');\n      }\n\n      const token = apiService.getToken();\n      \n      if (token) {\n        await getCurrentUser();\n      } else {\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n\n  const getCurrentUser = async () => {\n    try {\n      const response = await apiService.getCurrentUser();\n      \n      if (response.success) {\n        setUser(response.user);\n        setError(null);\n      } else {\n        throw new Error(response.message || 'Failed to get user');\n      }\n    } catch (error) {\n      console.error(\"Failed to get current user:\", error);\n      \n      // Handle authentication errors\n      if (\n        error.message.includes(\"Authentication failed\") ||\n        error.message.includes(\"Unauthorized\") ||\n        error.message.includes(\"Invalid token\") ||\n        error.message.includes(\"Token expired\")\n      ) {\n        logout();\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await apiService.login(credentials);\n      \n      if (response.success && response.token) {\n        apiService.setToken(response.token);\n        \n        // If user data is returned with login, use it\n        if (response.user) {\n          setUser(response.user);\n          setLoading(false);\n          return { success: true };\n        } else {\n          // Otherwise fetch user data\n          const userResponse = await apiService.getCurrentUser();\n          if (userResponse.success) {\n            setUser(userResponse.user);\n            setLoading(false);\n            return { success: true };\n          } else {\n            logout();\n            return {\n              success: false,\n              message: userResponse.message || \"Failed to fetch user data after login\",\n            };\n          }\n        }\n      } else {\n        setLoading(false);\n        return { \n          success: false, \n          message: response.message || \"Login failed\" \n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return { \n        success: false, \n        message: error.message || \"Login failed\" \n      };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await apiService.register(userData);\n      \n      if (response.success && response.token) {\n        apiService.setToken(response.token);\n        \n        // If user data is returned with registration, use it\n        if (response.user) {\n          setUser(response.user);\n          setLoading(false);\n          return { success: true };\n        } else {\n          // Otherwise fetch user data\n          const userResponse = await apiService.getCurrentUser();\n          if (userResponse.success) {\n            setUser(userResponse.user);\n            setLoading(false);\n            return { success: true };\n          } else {\n            logout();\n            return {\n              success: false,\n              message: userResponse.message || \"Failed to fetch user data after registration\",\n            };\n          }\n        }\n      } else {\n        setLoading(false);\n        return {\n          success: false,\n          message: response.message || \"Registration failed\",\n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return { \n        success: false, \n        message: error.message || \"Registration failed\" \n      };\n    }\n  };\n\n  const logout = () => {\n    apiService.removeToken();\n    setUser(null);\n    setError(null);\n    setLoading(false);\n    \n    // Redirect to login page\n    if (typeof window !== 'undefined') {\n      window.location.href = \"/login\";\n    }\n  };\n\n  const refreshUser = async () => {\n    await getCurrentUser();\n  };\n\n  const updateProfile = async (userData) => {\n    try {\n      const response = await apiService.updateProfile(userData);\n      \n      if (response.success) {\n        setUser(response.user);\n        return { success: true, message: response.message };\n      } else {\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      return { success: false, message: error.message };\n    }\n  };\n\n  // Role checking methods\n  const isAdmin = () => user?.role === \"admin\";\n  const isSubAdmin = () => user?.role === \"subadmin\";\n  const isUser = () => user?.role === \"user\";\n  const hasRole = (roles) => {\n    if (!user?.role) return false;\n    return Array.isArray(roles) ? roles.includes(user.role) : roles === user.role;\n  };\n\n  // Auth status checks\n  const isAuthenticated = () => !!user && !!apiService.getToken();\n  const isLoading = () => loading;\n  const hasError = () => !!error;\n\n  const value = {\n    // State\n    user,\n    loading,\n    error,\n    \n    // Actions\n    login,\n    register,\n    logout,\n    refreshUser,\n    updateProfile,\n    \n    // Role checks\n    isAdmin,\n    isSubAdmin,\n    isUser,\n    hasRole,\n    \n    // Status checks\n    isAuthenticated,\n    isLoading,\n    hasError,\n    \n    // Clear error\n    clearError: () => setError(null),\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// ==========================================\n// FILE: components/ProtectedRoute.js (BONUS)\n// ==========================================\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}