{"ast":null,"code":"\"use client\";\n\n// Safe way to access environment variables for both Vite and CRA\nconst getApiBaseUrl = () => {\n  // Try Vite first\n  if (typeof import.meta !== 'undefined' && import.meta.env) {\n    return import.meta.env.VITE_API_BASE_URL;\n  }\n  // Fallback to CRA\n  if (typeof process !== 'undefined' && process.env) {\n    return process.env.REACT_APP_API_BASE_URL;\n  }\n  // Default fallback\n  return \"http://localhost:5000/api\";\n};\nconst API_BASE_URL = getApiBaseUrl();\nconst apiService = {\n  getToken: () => localStorage.getItem(\"token\"),\n  setToken: token => localStorage.setItem(\"token\", token),\n  removeToken: () => localStorage.removeItem(\"token\"),\n  request: async (endpoint, method = \"GET\", data = null, isAuth = true) => {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isAuth) {\n      const token = apiService.getToken();\n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      } else {\n        // If token is required but not found, return an error\n        return {\n          success: false,\n          message: \"Authentication token not found.\"\n        };\n      }\n    }\n    const config = {\n      method,\n      headers\n    };\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n      const result = await response.json();\n      if (!response.ok) {\n        // Handle specific HTTP errors\n        if (response.status === 401 || response.status === 403) {\n          // Unauthorized or Forbidden, token might be expired or invalid\n          apiService.removeToken();\n          window.location.href = \"/login\"; // Redirect to login page\n        }\n        return {\n          success: false,\n          message: result.message || \"Something went wrong.\"\n        };\n      }\n      return {\n        success: true,\n        ...result\n      };\n    } catch (error) {\n      console.error(\"API request failed:\", error);\n      return {\n        success: false,\n        message: error.message || \"Network error or server is unreachable.\"\n      };\n    }\n  },\n  // Auth\n  register: userData => apiService.request(\"/auth/register\", \"POST\", userData, false),\n  login: credentials => apiService.request(\"/auth/login\", \"POST\", credentials, false),\n  getCurrentUser: () => apiService.request(\"/auth/me\", \"GET\"),\n  // Endpoint to get current user's full data including permissions\n\n  // Users\n  getAllUsers: () => apiService.request(\"/admin/users\", \"GET\"),\n  getUserById: userId => apiService.request(`/admin/users/${userId}`, \"GET\"),\n  updateUser: (userId, userData) => apiService.request(`/admin/users/${userId}`, \"PUT\", userData),\n  deleteUser: userId => apiService.request(`/admin/users/${userId}`, \"DELETE\"),\n  // Tasks\n  getTasks: () => apiService.request(\"/tasks\", \"GET\"),\n  // For current authenticated user (user/subadmin's own tasks)\n  getAllTasks: () => apiService.request(\"/admin/tasks\", \"GET\"),\n  // For admin/subadmin to get all tasks (backend should filter based on permissions)\n  createTask: taskData => apiService.request(\"/admin/tasks\", \"POST\", taskData),\n  // Admin/Subadmin can create and assign\n  updateTask: (taskId, taskData) => apiService.request(`/admin/tasks/${taskId}`, \"PUT\", taskData),\n  // Admin/Subadmin can update any task\n  deleteTask: taskId => apiService.request(`/admin/tasks/${taskId}`, \"DELETE\"),\n  assignTask: (taskId, userId) => apiService.request(`/admin/tasks/${taskId}/assign`, \"PUT\", {\n    userId\n  }),\n  // Admin/Subadmin assigns existing task\n  unassignTask: taskId => apiService.request(`/admin/tasks/${taskId}/unassign`, \"PUT\"),\n  // Admin/Subadmin unassigns task\n\n  // Sub-Admins\n  promoteToSubAdmin: userId => apiService.request(`/admin/subadmins/promote/${userId}`, \"PUT\"),\n  demoteSubAdmin: userId => apiService.request(`/admin/subadmins/demote/${userId}`, \"PUT\"),\n  updateSubAdminPermissions: (userId, permissions) => apiService.request(`/admin/subadmins/${userId}/permissions`, \"PUT\", permissions),\n  // Email\n  sendEmail: emailData => apiService.request(\"/admin/send-email\", \"POST\", emailData),\n  // User Task Actions (for Dashboard.jsx)\n  updateTaskStatus: (taskId, status) => apiService.request(`/tasks/${taskId}/status`, \"PUT\", {\n    status\n  }),\n  raiseIssue: (taskId, issueDescription) => apiService.request(`/tasks/${taskId}/issue`, \"POST\", {\n    issueDescription\n  })\n};\nexport default apiService;","map":{"version":3,"names":["getApiBaseUrl","import","meta","env","VITE_API_BASE_URL","process","REACT_APP_API_BASE_URL","API_BASE_URL","apiService","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","request","endpoint","method","data","isAuth","headers","success","message","config","body","JSON","stringify","response","fetch","result","json","ok","status","window","location","href","error","console","register","userData","login","credentials","getCurrentUser","getAllUsers","getUserById","userId","updateUser","deleteUser","getTasks","getAllTasks","createTask","taskData","updateTask","taskId","deleteTask","assignTask","unassignTask","promoteToSubAdmin","demoteSubAdmin","updateSubAdminPermissions","permissions","sendEmail","emailData","updateTaskStatus","raiseIssue","issueDescription"],"sources":["C:/Users/gondy/Downloads/taskflow-frontend/frontend/src/services/api.js"],"sourcesContent":["\"use client\";\n\n// Safe way to access environment variables for both Vite and CRA\nconst getApiBaseUrl = () => {\n  // Try Vite first\n  if (typeof import.meta !== 'undefined' && import.meta.env) {\n    return import.meta.env.VITE_API_BASE_URL;\n  }\n  // Fallback to CRA\n  if (typeof process !== 'undefined' && process.env) {\n    return process.env.REACT_APP_API_BASE_URL;\n  }\n  // Default fallback\n  return \"http://localhost:5000/api\";\n};\n\nconst API_BASE_URL = getApiBaseUrl();\n\nconst apiService = {\n  getToken: () => localStorage.getItem(\"token\"),\n  setToken: (token) => localStorage.setItem(\"token\", token),\n  removeToken: () => localStorage.removeItem(\"token\"),\n\n  request: async (endpoint, method = \"GET\", data = null, isAuth = true) => {\n    const headers = {\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (isAuth) {\n      const token = apiService.getToken();\n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      } else {\n        // If token is required but not found, return an error\n        return { success: false, message: \"Authentication token not found.\" };\n      }\n    }\n\n    const config = {\n      method,\n      headers,\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n      const result = await response.json();\n\n      if (!response.ok) {\n        // Handle specific HTTP errors\n        if (response.status === 401 || response.status === 403) {\n          // Unauthorized or Forbidden, token might be expired or invalid\n          apiService.removeToken();\n          window.location.href = \"/login\"; // Redirect to login page\n        }\n        return {\n          success: false,\n          message: result.message || \"Something went wrong.\",\n        };\n      }\n\n      return { success: true, ...result };\n    } catch (error) {\n      console.error(\"API request failed:\", error);\n      return {\n        success: false,\n        message: error.message || \"Network error or server is unreachable.\",\n      };\n    }\n  },\n\n  // Auth\n  register: (userData) =>\n    apiService.request(\"/auth/register\", \"POST\", userData, false),\n  login: (credentials) =>\n    apiService.request(\"/auth/login\", \"POST\", credentials, false),\n  getCurrentUser: () => apiService.request(\"/auth/me\", \"GET\"), // Endpoint to get current user's full data including permissions\n\n  // Users\n  getAllUsers: () => apiService.request(\"/admin/users\", \"GET\"),\n  getUserById: (userId) => apiService.request(`/admin/users/${userId}`, \"GET\"),\n  updateUser: (userId, userData) =>\n    apiService.request(`/admin/users/${userId}`, \"PUT\", userData),\n  deleteUser: (userId) =>\n    apiService.request(`/admin/users/${userId}`, \"DELETE\"),\n\n  // Tasks\n  getTasks: () => apiService.request(\"/tasks\", \"GET\"), // For current authenticated user (user/subadmin's own tasks)\n  getAllTasks: () => apiService.request(\"/admin/tasks\", \"GET\"), // For admin/subadmin to get all tasks (backend should filter based on permissions)\n  createTask: (taskData) =>\n    apiService.request(\"/admin/tasks\", \"POST\", taskData), // Admin/Subadmin can create and assign\n  updateTask: (taskId, taskData) =>\n    apiService.request(`/admin/tasks/${taskId}`, \"PUT\", taskData), // Admin/Subadmin can update any task\n  deleteTask: (taskId) =>\n    apiService.request(`/admin/tasks/${taskId}`, \"DELETE\"),\n  assignTask: (taskId, userId) =>\n    apiService.request(`/admin/tasks/${taskId}/assign`, \"PUT\", { userId }), // Admin/Subadmin assigns existing task\n  unassignTask: (taskId) =>\n    apiService.request(`/admin/tasks/${taskId}/unassign`, \"PUT\"), // Admin/Subadmin unassigns task\n\n  // Sub-Admins\n  promoteToSubAdmin: (userId) =>\n    apiService.request(`/admin/subadmins/promote/${userId}`, \"PUT\"),\n  demoteSubAdmin: (userId) =>\n    apiService.request(`/admin/subadmins/demote/${userId}`, \"PUT\"),\n  updateSubAdminPermissions: (userId, permissions) =>\n    apiService.request(\n      `/admin/subadmins/${userId}/permissions`,\n      \"PUT\",\n      permissions\n    ),\n\n  // Email\n  sendEmail: (emailData) =>\n    apiService.request(\"/admin/send-email\", \"POST\", emailData),\n\n  // User Task Actions (for Dashboard.jsx)\n  updateTaskStatus: (taskId, status) =>\n    apiService.request(`/tasks/${taskId}/status`, \"PUT\", { status }),\n  raiseIssue: (taskId, issueDescription) =>\n    apiService.request(`/tasks/${taskId}/issue`, \"POST\", { issueDescription }),\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}