{"ast":null,"code":"\"use client\";import{createContext,useContext,useState,useEffect}from\"react\";import apiService from\"../services/api\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{initializeAuth();},[]);const initializeAuth=async()=>{try{setLoading(true);setError(null);// Check if apiService methods exist\nif(!apiService||typeof apiService.getToken!==\"function\"){throw new Error(\"API service not properly configured\");}const token=apiService.getToken();if(token){await getCurrentUser();}else{setLoading(false);}}catch(error){console.error(\"Auth initialization error:\",error);setError(error.message);setLoading(false);}};const getCurrentUser=async()=>{try{const response=await apiService.getCurrentUser();if(response.success){setUser(response.user);setError(null);}else{throw new Error(response.message||\"Failed to get user\");}}catch(error){console.error(\"Failed to get current user:\",error);// Handle authentication errors\nif(error.message.includes(\"Authentication failed\")||error.message.includes(\"Unauthorized\")||error.message.includes(\"Invalid token\")||error.message.includes(\"Token expired\")){logout();}else{setError(error.message);}}finally{setLoading(false);}};const login=async credentials=>{try{setLoading(true);setError(null);const response=await apiService.login(credentials);if(response.success&&response.token){apiService.setToken(response.token);// If user data is returned with login, use it\nif(response.user){setUser(response.user);setLoading(false);return{success:true};}else{// Otherwise fetch user data\nconst userResponse=await apiService.getCurrentUser();if(userResponse.success){setUser(userResponse.user);setLoading(false);return{success:true};}else{logout();return{success:false,message:userResponse.message||\"Failed to fetch user data after login\"};}}}else{setLoading(false);return{success:false,message:response.message||\"Login failed\"};}}catch(error){setLoading(false);setError(error.message);return{success:false,message:error.message||\"Login failed\"};}};const register=async userData=>{try{setLoading(true);setError(null);const response=await apiService.register(userData);if(response.success&&response.token){apiService.setToken(response.token);// If user data is returned with registration, use it\nif(response.user){setUser(response.user);setLoading(false);return{success:true};}else{// Otherwise fetch user data\nconst userResponse=await apiService.getCurrentUser();if(userResponse.success){setUser(userResponse.user);setLoading(false);return{success:true};}else{logout();return{success:false,message:userResponse.message||\"Failed to fetch user data after registration\"};}}}else{setLoading(false);return{success:false,message:response.message||\"Registration failed\"};}}catch(error){setLoading(false);setError(error.message);return{success:false,message:error.message||\"Registration failed\"};}};const logout=()=>{apiService.removeToken();setUser(null);setError(null);setLoading(false);// Redirect to login page\nif(typeof window!==\"undefined\"){window.location.href=\"/login\";}};const refreshUser=async()=>{await getCurrentUser();};// Role checking methods\nconst isAdmin=()=>(user===null||user===void 0?void 0:user.role)===\"admin\";const isSubAdmin=()=>(user===null||user===void 0?void 0:user.role)===\"subadmin\";const isUser=()=>(user===null||user===void 0?void 0:user.role)===\"user\";const hasRole=roles=>{if(!(user!==null&&user!==void 0&&user.role))return false;return Array.isArray(roles)?roles.includes(user.role):roles===user.role;};// Auth status checks\nconst isAuthenticated=()=>!!user&&!!apiService.getToken();const value={// State\nuser,loading,error,// Actions\nlogin,register,logout,refreshUser,// Role checks\nisAdmin,isSubAdmin,isUser,hasRole,// Status checks\nisAuthenticated,// Clear error\nclearError:()=>setError(null)};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["createContext","useContext","useState","useEffect","apiService","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","error","setError","initializeAuth","getToken","token","getCurrentUser","console","message","response","success","includes","logout","login","credentials","setToken","userResponse","register","userData","removeToken","window","location","href","refreshUser","isAdmin","role","isSubAdmin","isUser","hasRole","roles","Array","isArray","isAuthenticated","value","clearError","Provider"],"sources":["C:/Users/gondy/OneDrive/Desktop/taskflow-frontend/frontend/src/context/AuthContext.js"],"sourcesContent":["\"use client\";\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport apiService from \"../services/api\";\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n\n  const initializeAuth = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Check if apiService methods exist\n      if (!apiService || typeof apiService.getToken !== \"function\") {\n        throw new Error(\"API service not properly configured\");\n      }\n\n      const token = apiService.getToken();\n\n      if (token) {\n        await getCurrentUser();\n      } else {\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(\"Auth initialization error:\", error);\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n\n  const getCurrentUser = async () => {\n    try {\n      const response = await apiService.getCurrentUser();\n\n      if (response.success) {\n        setUser(response.user);\n        setError(null);\n      } else {\n        throw new Error(response.message || \"Failed to get user\");\n      }\n    } catch (error) {\n      console.error(\"Failed to get current user:\", error);\n\n      // Handle authentication errors\n      if (\n        error.message.includes(\"Authentication failed\") ||\n        error.message.includes(\"Unauthorized\") ||\n        error.message.includes(\"Invalid token\") ||\n        error.message.includes(\"Token expired\")\n      ) {\n        logout();\n      } else {\n        setError(error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiService.login(credentials);\n\n      if (response.success && response.token) {\n        apiService.setToken(response.token);\n\n        // If user data is returned with login, use it\n        if (response.user) {\n          setUser(response.user);\n          setLoading(false);\n          return { success: true };\n        } else {\n          // Otherwise fetch user data\n          const userResponse = await apiService.getCurrentUser();\n          if (userResponse.success) {\n            setUser(userResponse.user);\n            setLoading(false);\n            return { success: true };\n          } else {\n            logout();\n            return {\n              success: false,\n              message:\n                userResponse.message || \"Failed to fetch user data after login\",\n            };\n          }\n        }\n      } else {\n        setLoading(false);\n        return {\n          success: false,\n          message: response.message || \"Login failed\",\n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return {\n        success: false,\n        message: error.message || \"Login failed\",\n      };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await apiService.register(userData);\n\n      if (response.success && response.token) {\n        apiService.setToken(response.token);\n\n        // If user data is returned with registration, use it\n        if (response.user) {\n          setUser(response.user);\n          setLoading(false);\n          return { success: true };\n        } else {\n          // Otherwise fetch user data\n          const userResponse = await apiService.getCurrentUser();\n          if (userResponse.success) {\n            setUser(userResponse.user);\n            setLoading(false);\n            return { success: true };\n          } else {\n            logout();\n            return {\n              success: false,\n              message:\n                userResponse.message ||\n                \"Failed to fetch user data after registration\",\n            };\n          }\n        }\n      } else {\n        setLoading(false);\n        return {\n          success: false,\n          message: response.message || \"Registration failed\",\n        };\n      }\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return {\n        success: false,\n        message: error.message || \"Registration failed\",\n      };\n    }\n  };\n\n  const logout = () => {\n    apiService.removeToken();\n    setUser(null);\n    setError(null);\n    setLoading(false);\n\n    // Redirect to login page\n    if (typeof window !== \"undefined\") {\n      window.location.href = \"/login\";\n    }\n  };\n\n  const refreshUser = async () => {\n    await getCurrentUser();\n  };\n\n  // Role checking methods\n  const isAdmin = () => user?.role === \"admin\";\n  const isSubAdmin = () => user?.role === \"subadmin\";\n  const isUser = () => user?.role === \"user\";\n  const hasRole = (roles) => {\n    if (!user?.role) return false;\n    return Array.isArray(roles)\n      ? roles.includes(user.role)\n      : roles === user.role;\n  };\n\n  // Auth status checks\n  const isAuthenticated = () => !!user && !!apiService.getToken();\n\n  const value = {\n    // State\n    user,\n    loading,\n    error,\n\n    // Actions\n    login,\n    register,\n    logout,\n    refreshUser,\n\n    // Role checks\n    isAdmin,\n    isSubAdmin,\n    isUser,\n    hasRole,\n\n    // Status checks\n    isAuthenticated,\n\n    // Clear error\n    clearError: () => setError(null),\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}